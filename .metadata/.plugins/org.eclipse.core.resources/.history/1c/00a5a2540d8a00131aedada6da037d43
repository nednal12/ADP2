package com.bmarohnic.buysafe;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import org.xmlpull.v1.XmlPullParserException;

import android.app.ListActivity;
import android.content.Context;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.ListView;
import android.widget.Toast;

import com.bmarohnic.lib.APIInterface;
import com.bmarohnic.lib.FileManager;
import com.bmarohnic.lib.NetworkConnection;
import com.bmarohnic.lib.RecallAdapter;
import com.bmarohnic.lib.XMLParser;
import com.bmarohnic.lib.XMLParser.XMLTagData;

public class LandingPage extends ListActivity {

	Context _context = this;
	Boolean _isDeviceConnected = false;
	List<XMLTagData> entries;
	
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.landing_page);
        
        
        // Call getConnectionStatus and getConnectionType located within the NetworkConnection class.
        // The results will be used to determine whether to retrieve new data from the API 
        // or load stored data resident on the device if it exists.
        _isDeviceConnected = NetworkConnection.getConnectionStatus(_context);
        
        if(_isDeviceConnected == true){
        	Log.i("Network Connection", NetworkConnection.getConnectionType(_context));
        	
        	// Connection was found. Begin the process of retrieving data from CPSC.gov.
        	getData();
        	
        // Oh no, no cell or wifi detected. Go get cached data if it exists.
        // If no cached data exists, inform the user so that they don't get upset and uninstall the app.
        } else {
        	String xmlString = FileManager.readStringFromFile(_context, "cpsc.txt");
        	
        	// Use the values generated within the catch statements of the FileManager class to 
        	// inform the user why there is no information to display.
        	if (xmlString.equals("No cached data to display") || xmlString.equals("Read error encountered")) {
        		Toast.makeText(this, xmlString, Toast.LENGTH_LONG).show();
        	
        	// If cached data was found it is still stored within the same XML style as it was originally 
        	// delivered thru the API. Therefore, run it thru the same process in order to get it to 
        	// display in the ListView.
        	} else{
        		try {
        			// Convert the string returned by APIInterface.getAPIData into an InputStream.
        			// The required data type to the XMLPullParser is InputStream.
    				InputStream inputStream = new ByteArrayInputStream(xmlString.getBytes("UTF-8"));
    				XMLParser xmlParser = new XMLParser();
    				try {
    					entries = xmlParser.parse(inputStream);
    					
    					for (XMLTagData entry : entries) {
    						Log.i("MainActivity", entry.recallNo);
    						Log.i("MainActivity", entry.recallURL);
    						Log.i("MainActivity", entry.recDate);
    						Log.i("MainActivity", entry.manufacturer);
    						Log.i("MainActivity", entry.type);
    						Log.i("MainActivity", entry.prname);
    						Log.i("MainActivity", entry.hazard);
    						Log.i("MainActivity", entry.country_mfg);
    						
    					}

    			// Use a custom view to display the data in the ListView.
    			RecallAdapter adapter = new RecallAdapter(LandingPage.this, R.layout.item_recall, entries);
    			setListAdapter(adapter);	
    			
    			// Let the user know that this may not be the most current data.
    			Toast.makeText(this, "Cached Data Loaded", Toast.LENGTH_LONG).show();
    						
    				} catch (XmlPullParserException e) {
    					// TODO Auto-generated catch block
    					e.printStackTrace();
    				} catch (IOException e) {
    					// TODO Auto-generated catch block
    					e.printStackTrace();
    				}
    				
    			} catch (UnsupportedEncodingException e) {
    				// TODO Auto-generated catch block
    				e.printStackTrace();
    			}
        	}
        	}
        }



    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.landing_page, menu);
        return true;
    }
    
    
    private void getData(){
    	
    	// Create two date variables to hold the start date and end date for the API call.
    	// getTime() returns the number of milliseconds for a date value.
    	// 604800000 is the number of milliseconds in a week.
    	Date endDateDate = new Date();
    	Date startDateDate = new Date(endDateDate.getTime() - 604800000);
    	
    	// Create and instance of the SimpleDateFormat and set it to display dates in yyyy-MM-dd format
    	// because this is what is required by the API.
    	// SimpleDateFormat accepts a date and returns a string.
    	SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd", Locale.US);
    	String endDateString = simpleDateFormat.format(endDateDate);
    	String startDateString = simpleDateFormat.format(startDateDate);
    	
    	// Piece together the API string.
    	String pieceMealURL = "http://www.cpsc.gov/cgibin/CPSCUpcWS/CPSCUpcSvc.asmx/getRecallByDate?startDate=" + startDateString + 
    			"&endDate=" + endDateString + "&userId=myuserid&password=mypassword";
    	
    	try {
    		URL completeURL = new URL(pieceMealURL);
    		// Now that the API URL is available, pass it along to the AsyncTask().
    		AsynchronousTask asyncTask = new AsynchronousTask();
    		
    		asyncTask.execute(completeURL);
    		
    	} catch (MalformedURLException e) {
    		// TODO Auto-generated catch block
    		e.printStackTrace();
    	}
    	
    }
    
    
    // AsyncTask will accept the generated API URL and pass it to APIInterface.getAPIData.
    private class AsynchronousTask extends AsyncTask<URL, Void, String>{

    	@Override
    	protected String doInBackground(URL... urls) {
    		String apiDataString = "";
    		
    		for(URL url: urls){
    			apiDataString = APIInterface.getAPIData(url);
    		}
    		// Since we now have data to display, go ahead and save a copy of it
    		// in order to have something to view some time in the future if it
    		// is determined that the device is not connected to the network.
    		FileManager.writeStringToFile(_context, "cpsc.txt", apiDataString);
    		
    		return apiDataString;
    	}
    	
    	
    	@Override
    	protected void onPostExecute(String result) {
    		
    		try {
    			// Convert the string returned by APIInterface.getAPIData into an InputStream.
    			// The required data type to the XMLPullParser is InputStream.
				InputStream inputStream = new ByteArrayInputStream(result.getBytes("UTF-8"));
				XMLParser xmlParser = new XMLParser();
				try {
					entries = xmlParser.parse(inputStream);
					
					for (XMLTagData entry : entries) {
						Log.i("MainActivity", entry.recallNo);
						Log.i("MainActivity", entry.recallURL);
						Log.i("MainActivity", entry.recDate);
						Log.i("MainActivity", entry.manufacturer);
						Log.i("MainActivity", entry.type);
						Log.i("MainActivity", entry.prname);
						Log.i("MainActivity", entry.hazard);
						Log.i("MainActivity", entry.country_mfg);
						
					}

			
			RecallAdapter adapter = new RecallAdapter(LandingPage.this, R.layout.item_recall, entries);
			
			
			setListAdapter(adapter);	
			
						
				} catch (XmlPullParserException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
			} catch (UnsupportedEncodingException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
    	}
    }
    
    
    // Once the user selects a recall from the list, place the data into an intent
    // in order to pass it along to the next activity.
    @Override
    protected void onListItemClick(ListView l, View v, int position, long id) {
    	super.onListItemClick(l, v, position, id);
    	
    	XMLTagData entry = entries.get(position);
    	
    	Intent intent = new Intent(this, DetailActivity.class);
    	intent.putExtra("recallNo", entry.recallNo);
    	intent.putExtra("recallURL", entry.recallURL);
    	intent.putExtra("recDate", entry.recDate);
    	intent.putExtra("manufacturer", entry.manufacturer);
    	intent.putExtra("type", entry.type);
    	intent.putExtra("prname", entry.prname);
    	intent.putExtra("hazard", entry.hazard);
    	intent.putExtra("country_mfg", entry.country_mfg);
    	
		startActivity(intent);
    	
    }
    
    // Navigate to other activities depending on the item selected.
    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
    	Intent intent = null;
    	switch (item.getItemId()) {
		case R.id.launchSearchActivity:
			intent = new Intent(LandingPage.this, SearchActivity.class);
			startActivity(intent);
			break;
		
		case R.id.launchWatchListActivity:
			intent = new Intent(LandingPage.this, WatchListActivity.class);
			startActivity(intent);
			break;
			
		default:
			break;
		}
    	return super.onOptionsItemSelected(item);
    }
}